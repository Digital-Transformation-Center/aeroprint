# docker-compose.yml

version: '3.8' # Specify the Docker Compose file format version

services:
  # Define a service named 'talker'
  talker:
    # Build the Docker image from the current directory where the Dockerfile is located.
    # This assumes your Dockerfile is named 'Dockerfile' and is in the same directory as this docker-compose.yml file.
    build:
      context: .
      dockerfile: exec/Dockerfile # Explicitly specify the Dockerfile name if it's not 'Dockerfile'

    # Restart the container if it exits, unless it was explicitly stopped.
    restart: on-failure

    # Name the container explicitly for easier identification
    container_name: ros_humble_talker_node

    # If you want to see the talker output directly in your terminal,
    # you can set tty and stdin_open to true (useful for interactive debugging)
    tty: true
    stdin_open: true

    volumes:
    - /dev/shm:/dev/shm
    - ../../src/:/home/aeroprint_user/aeroprint/src

    # *** CHANGED: Use host networking mode ***
    # This allows the container to share the host's network namespace,
    # making ROS 2 discovery easier across containers or with host processes.
    network_mode: host
    ipc: host

    command: tail -f /dev/null

    # environment:
    #   - FASTDDS_BUILTIN_TRANSPORTS=UDPv4 # Force Fast-DDS to use only UDP transport

  backend-node-api:
    build:
      context: ../../
      dockerfile: deploy/starling/exec/Dockerfile.backend
    container_name: aeroprint-backend-api
    ports:
      - "4000:5000"
    volumes:
      - ../../src/:/aeroprint/src
      - /tmp/uploads:/uploads
    environment:
      - FLASK_APP=backend/app.py
      - FLASK_RUN_HOST=0.0.0.0
      - UPLOAD_FOLDER=/uploads
    restart: unless-stopped

  react-frontend:
    build:
      context: ../../
      dockerfile: deploy/starling/exec/Dockerfile.frontend
    container_name: aeroprint-frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend-node-api
    restart: unless-stopped


# *** REMOVED: No custom networks needed when using host networking mode ***
# networks:
#   ros_network:
#     driver: bridge
